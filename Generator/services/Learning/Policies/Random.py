
#
#   Epsilon Greedu with Counter-based approach
#

##################################################################################################################################
#
#   IMPORTS
#
##################################################################################################################################

import random
#
from services.Learning.Policies.Policy import Policy

##################################################################################################################################
#
#   CLASS
#
##################################################################################################################################


class Random(Policy):

    ##################################################################################################################################
    #
    #   VARIABLES
    #
    ##################################################################################################################################

    ##################################################################################################################################
    #
    #   CONSTRUCTOR
    #
    ##################################################################################################################################

    def __init__(self):
        super().__init__()

    ##################################################################################################################################
    #
    #   GET
    #
    ##################################################################################################################################

    def isRandom(self):
        return True

    ##################################################################################################################################
    #
    #   SET
    #
    ##################################################################################################################################

    ##################################################################################################################################
    #
    #   LOGIC
    #
    ##################################################################################################################################

    def runPolicy(self, input):

        # ------------------
        # input
        # ------------------
        state = input["state"]
        actions = input["actions"]
        knowledge = input["knowledge"]

        # ------------------
        # decide action
        # ------------------
        extra = {}
        action_selected = random.choice(actions)

        return action_selected, extra
