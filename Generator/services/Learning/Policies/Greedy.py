
#
#   Greedy Policy
#

##################################################################################################################################
#
#   IMPORTS
#
##################################################################################################################################


##################################################################################################################################
#
#   CLASS
#
##################################################################################################################################


from services.Learning.Policies.Policy import Policy


class Greedy(Policy):

    ##################################################################################################################################
    #
    #   VARIABLES
    #
    ##################################################################################################################################

    ##################################################################################################################################
    #
    #   CONSTRUCTOR
    #
    ##################################################################################################################################

    def __init__(self):
        super().__init__()
        pass

    ##################################################################################################################################
    #
    #   GET
    #
    ##################################################################################################################################

    def isGreedy(self):
        return True

    ##################################################################################################################################
    #
    #   SET
    #
    ##################################################################################################################################

    ##################################################################################################################################
    #
    #   LOGIC
    #
    ##################################################################################################################################

    def runPolicy(self, input):

        # ------------------
        # input
        # ------------------
        state = input["state"]
        actions = input["actions"]
        knowledge = input["knowledge"]

        # ------------------
        # decide action
        # ------------------
        action_selected = self.exploit(state, actions, knowledge)

        return action_selected, {}

    ##################################################################################################################################
    #
    #   AUXILIAR
    #
    ##################################################################################################################################

    def exploit(self, state, actions, knowledge_base):
        return knowledge_base.getBestAction(state, actions)
