##################################################################################################################################
#
#   IMPORTS
#
##################################################################################################################################

import inputs.GenerationInputs as GenerationInputs
from services.ActionsSpace.Actions.Condition.Condition import CONDITION
#import utils.Utils as Utils

##################################################################################################################################
#
#   CLASS
#
##################################################################################################################################


class THRESHOLD(CONDITION):

    ##################################################################################################################################
    #
    #   VARIBLES
    #
    ##################################################################################################################################

    # number of messages to wait
    #_threshold = None

    ##################################################################################################################################
    #
    #   CONSTRUCTOR
    #
    ##################################################################################################################################

    def __init__(self, threshold, message):
        super().__init__(threshold)
        self.setMessage(message)
        self.setReward(GenerationInputs.getThresholdReward(threshold))

    ##################################################################################################################################
    #
    #   GET
    #
    ##################################################################################################################################

    def getLabel(self):
        if str(self.getID()) == "1":
            return " if received "+str(self.getMessage().getLabel())+" from " + \
                str(self.getID()) + " party"
        else:
            return " if received "+str(self.getMessage().getLabel())+" from " + \
                str(self.getID()) + " distinct parties"

    # ----------------------------------------------------------------

    def hasMessageType(self):
        return True

    ##################################################################################################################################
    #
    #   SET
    #
    ##################################################################################################################################

    def setMessage(self, message):
        self._message = message

    ##################################################################################################################################
    #
    #   AUXILIAR
    #
    ##################################################################################################################################

    def __eq__(self, condition):
        return super().__eq__(condition) and (type(condition) is THRESHOLD)
